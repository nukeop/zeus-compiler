extern crate zeus_compiler;

#[cfg(test)]
mod integration_tests {
    use zeus_compiler::source_file::SourceFile;
    use zeus_compiler::instruction::Instruction;
    use zeus_compiler::token::Token;

    #[test]
    fn tokenize_example_intro() {
        let mut sf = SourceFile::new();
        sf.load("./examples/intro.source".to_string());
        let result = sf.tokenize().unwrap();
        assert_eq!(result, ());
        assert_eq!(sf.tokens, vec![
            Token::Instruction(Instruction::COPY),
            Token::Argument(112),
            Token::Argument(0),
            Token::Instruction(Instruction::COPY),
            Token::Argument(80),
            Token::Argument(2),
            Token::Instruction(Instruction::COPY),
            Token::Argument(119),
            Token::Argument(4),
            Token::Instruction(Instruction::COPY),
            Token::Argument(21),
            Token::Argument(6),
            Token::Instruction(Instruction::COPY),
            Token::Argument(119),
            Token::Argument(8),
            Token::Instruction(Instruction::COPY),
            Token::Argument(1),
            Token::Argument(0x000A),
            Token::Instruction(Instruction::COPY),
            Token::Argument(7),
            Token::Argument(0x000C),
            Token::Instruction(Instruction::COPY),
            Token::Argument(112),
            Token::Argument(0x000E),
            Token::Instruction(Instruction::COPY),
            Token::Argument(80),
            Token::Argument(10),
            Token::Instruction(Instruction::COPY),
            Token::Argument(119),
            Token::Argument(12),
            Token::Instruction(Instruction::COPY),
            Token::Argument(21),
            Token::Argument(14),
            Token::Instruction(Instruction::COPY),
            Token::Argument(119),
            Token::Argument(16),
            Token::Instruction(Instruction::COPY),
            Token::Argument(1),
            Token::Argument(18),
            Token::Instruction(Instruction::COPY),
            Token::Argument(7),
            Token::Argument(0x001A),
            Token::Instruction(Instruction::COPY),
            Token::Argument(165),
            Token::Argument(0x001E),
            Token::Instruction(Instruction::COPY),
            Token::Argument(181),
            Token::Argument(20),
            Token::Instruction(Instruction::COPY),
            Token::Argument(172),
            Token::Argument(22),
            Token::Instruction(Instruction::COPY),
            Token::Argument(165),
            Token::Argument(24),
            Token::Instruction(Instruction::COPY),
            Token::Argument(1),
            Token::Argument(26),
            Token::Instruction(Instruction::COPY),
            Token::Argument(128),
            Token::Argument(0x001F),
            Token::Instruction(Instruction::COPY),
            Token::Argument(128),
            Token::Argument(21),
            Token::Instruction(Instruction::COPY),
            Token::Argument(128),
            Token::Argument(23),
            Token::Instruction(Instruction::COPY),
            Token::Argument(128),
            Token::Argument(25),
            Token::Instruction(Instruction::COPY),
            Token::Argument(192),
            Token::Argument(27),
            Token::Instruction(Instruction::WAIT),
            Token::Instruction(Instruction::WAIT),
            Token::Instruction(Instruction::WAIT),
            Token::Instruction(Instruction::WAIT),
            Token::Instruction(Instruction::MVIY),
            Token::Argument(0),
            Token::Instruction(Instruction::CPIR),
            Token::Argument(0),
            Token::Argument(300),
            Token::Instruction(Instruction::NEGI),
            Token::Argument(300),
            Token::Argument(300),
            Token::Instruction(Instruction::CPID),
            Token::Argument(300),
            Token::Argument(0),
            Token::Instruction(Instruction::ADDY),
            Token::Argument(1),
            Token::Instruction(Instruction::MVYA),
            Token::Argument(300),
            Token::Instruction(Instruction::COPY),
            Token::Argument(40),
            Token::Argument(301),
            Token::Instruction(Instruction::EQLS),
            Token::Argument(300),
            Token::Argument(301),
            Token::Instruction(Instruction::FJMP),
            Token::Argument(2066),
            Token::Instruction(Instruction::MVIY),
            Token::Argument(0),
            Token::Instruction(Instruction::MVIT),
            Token::Argument(0),
            Token::Instruction(Instruction::WAIT),
            Token::Instruction(Instruction::WAIT),
            Token::Instruction(Instruction::WAIT),
            Token::Instruction(Instruction::WAIT),
            Token::Instruction(Instruction::CLRS),
            Token::Instruction(Instruction::JUMP),
            Token::Argument(2000)
            ]);
}
}
